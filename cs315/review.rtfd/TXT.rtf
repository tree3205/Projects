{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red233\green233\blue233;}
\margl1440\margr1440\vieww28300\viewh14900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs12 \cf0 Jump instructions get the low-order 26 bit of the dest from the address field of the instruction. This is augmented by 2 bits to turn it into 28 bit byte address. The high order 4-bits come from the PC. 
\b If the PC and dest high-order 4 bits are differ in the top 4 bits, then dest can't be directly set from jump instruction
\b0 .\
Branch instructions augments the 16 bit immediate field by 2 bits to change it from a word offset to a byte offset. This is then added to PC+4 to get the branch destination. If dest can't be reached from PC+4 by changing the low-order 18 bits, then dest can't be directly set from branch instruction.\

\b Dest-(PC+4): byte offset ->sll 2 bits get word offset -> change to decimal, if <2^15-1, then yes.\
Or Dest-(PC+4)<2^17-1, then yes.
\f1\b0 \

\f0 C source files are named x.c, assembly files are x.s, object files are named x.o, statically linked library routines are x.a, dynamically linked library routes are x.so, and executable files by default are called a.out.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\fs24 \cf0 {{\NeXTGraphic Screen Shot 2014-04-25 at 10.10.23 AM.png \width2940 \height3380
}¬}
\fs12 2^25 = 33,554,432      2^17= 131,072       2^15=32,768 \
To fetch the integer 32-bit product in lo register, the programmer uses move from lo (mflo).\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 To fetch the integer 32-bit product in hi register, the programmer uses move from lo (mfli).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\fs24 \cf0 {{\NeXTGraphic Screen Shot 2014-04-25 at 10.16.34 AM.png \width5760 \height2800
}¬}{{\NeXTGraphic Screen Shot 2014-04-25 at 10.17.15 AM.png \width6000 \height3400
}¬}
\fs12 \cb2 \
2*3(dec) = 0010*0011							                   dividing 7\cb2 \dn8 ten \cb2 \up0 by 2\cb2 \dn8 ten\cb2 \up0 , = 0000 0111\cb2 \dn8 two \cb2 \up0 by 0010\cb2 \dn8 two\cb2 \up0 .\
product = 0;									 quotient = 0;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \cb2 for (bit = 0; bit < bitcount; bit++) \{                                                           		                 divisor <<= 32;  // Left shift 32 bits\
   if (multiplier & 1) Add(multiplicand, product);                                      		                 divisor <<= 32;  // Left shift 32 bits\
   multiplicand <<= 1;                                                                              		                 remainder = dividend;   // Note that there are 33 iterations\
   multiplier >>= 1;  /* Fill rightmost bit with 0 */                                      		                for (iter = 0; iter <= 32; iter++) \{\
\} (binary multiply)							remainder -= divisor;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \cb2                                                                                                                		         	if (remainder >= 0) \{\
\pard\pardeftab720
\cf0       								       quotient <<= 1;\
      								       quotient |= 1;\
   								\} else \{ // Negative remainder\
      									remainder += divisor;\
      									quotient <<= 1;\
								\}\
  									 divisor >>= 1;\
								\}
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 \cb1 {{\NeXTGraphic Screen Shot 2014-04-25 at 10.13.26 AM.png \width6000 \height4720
}¬}{{\NeXTGraphic Screen Shot 2014-04-25 at 10.14.23 AM.png \width5380 \height2900
}¬}
\fs12 When the 1-bit control to a two-way multiplexor is asserted, the multiplexor selects the input corresponding to 1.\
\pard\pardeftab720\sa240
\cf0 Otherwise, if the control is deasserted, the multiplexor selects the 0 input.        topMux: PCsrc, leftMux:ALUsrc, rightMux:MemoryTOReg\
\pard\pardeftab720

\fs24 \cf0 {{\NeXTGraphic page300image22352.png \width8490 \height1350 \noorient
}¬}{{\NeXTGraphic Screen Shot 2014-04-25 at 10.35.56 AM.png \width4680 \height1340
}¬}\pard\pardeftab720

\fs12 \cf0 \
\pard\pardeftab720

\f1 \cf0 \
\
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720
\cf0 \
\
\
\pard\pardeftab720
\cf0 \cb2 \
}