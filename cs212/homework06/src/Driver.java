import java.util.ArrayList;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;


public class Driver {
	/**
	 * Tests whether the primes generated by your class are correct. If
	 * not, double check that you are not including duplicate numbers and
	 * that the collection you return is in sorted order. (You should not
	 * need to explicitly sort if you do everything correctly.)
	 *
	 * @param max maximum value to use in testing
	 * @return <code>true</code> if primes are correct
	 * @throws InterruptedException 
	 */
	private static boolean testPrimes(int max) throws InterruptedException {
		ArrayList<Integer> test1 = new ArrayList<Integer>(PrimeHelper.primesBySieve(max));
		ArrayList<Integer> test2 = new ArrayList<Integer>(MultithreadedPrimeFinder.findPrimes(max, 1));
		ArrayList<Integer> test3 = new ArrayList<Integer>(MultithreadedPrimeFinder.findPrimes(max, 2));
		ArrayList<Integer> test4 = new ArrayList<Integer>(MultithreadedPrimeFinder.findPrimes(max, 3));

		return test2.equals(test1) && test3.equals(test1) && test4.equals(test1);
	}

	/**
	 * Tests whether more threads results in faster results. For a large
	 * enough maximum value, this should be true for 2 threads.
	 *
	 * @param max maximum value to use in testing
	 * @throws InterruptedException 
	 */
	private static void timeTrials(int max) throws InterruptedException {

		int runs = 5;
		int[] threads = new int[] { 1, 2, 5 };
		long start = 0;
		double average = 0;

		for(int n : threads) {
			average = 0;

			for(int i = 0; i < runs; i++) {
				start = System.nanoTime();
				MultithreadedPrimeFinder.findPrimes(max, n);
				average += (System.nanoTime() - start);
			}

			average /= runs;
			average /= 1000000.0;

			System.out.printf("Using %02d threads took on average %7.4f milliseconds.%n",
					n, average);
		}
	}

	/**
	 * Helps test whether the multithreaded prime finder results are
	 * correct, and if multithreading helps speed up the process.
	 *
	 * @param args unused
	 * @throws InterruptedException 
	 */
	public static void main(String[] args) throws InterruptedException {
		/*
		 * Setup logger if necessary. If you place a log4j.properties
		 * file in the src directory, log4j will automatically use it
		 * instead of the basic configuration below.
		 */
		if(!Logger.getRootLogger().getAllAppenders().hasMoreElements()) {
			PatternLayout consoleLayout = new PatternLayout("[%p] %t: %m%n");
			ConsoleAppender consoleAppender = new ConsoleAppender(consoleLayout);
			consoleAppender.setThreshold(Level.DEBUG);
			Logger.getRootLogger().addAppender(consoleAppender);
		}

		/*
		 * Test to make sure results are correct. Turns off debug
		 * messages unless problems are found.
		 */

		Logger.getRootLogger().setLevel(Level.WARN);

		if(testPrimes(101)) {
			/*
			 * Will run time trials if results are correct. You should
			 * see a speedup with 2 threads with the maximum provided
			 * below. If not, try increasing the max. If that doesn't
			 * work, revisit your code and see if it can be improved.
			 *
			 * When testing the runtimes, I suggest you test on the lab
			 * computers if possible. To do this, try:
			 *
			 * javac -cp /home/public/cs212/libraries:. *.java
			 * java -cp /home/public/cs212/libraries:. MultithreadedPrimeFinder
			 */
			System.out.println("Primes appear to be calculated correctly.");
			timeTrials(10000);

			/*
			 * Example Output:
			 *
			 * [sjengle@lectern02 src]$ java MultithreadedPrimeFinder
			 * Primes appear to be calculated correctly.
			 * Using 01 threads took on average  8.4421 milliseconds.
			 * Using 02 threads took on average  1.1558 milliseconds.
			 * Using 05 threads took on average  1.1024 milliseconds.
			 */

		} else {
			/*
			 * Will output debug messages to help you figure out what
			 * went wrong.
			 */

			System.out.println("There are issues with your prime output.");
			System.out.println();

			int max = 31;
			int threads = 3;

			System.out.println("  CORRECT: " + PrimeHelper.primesBySieve(max));
			System.out.println("1 WORKERS: " + MultithreadedPrimeFinder.findPrimes(max, 1));
			System.out.println("2 WORKERS: " + MultithreadedPrimeFinder.findPrimes(max, 2));
			System.out.println("3 WORKERS: " + MultithreadedPrimeFinder.findPrimes(max, 3));

			Logger.getRootLogger().setLevel(Level.DEBUG);

			System.out.println();
			System.out.printf("findPrimes(%d, %d):%n", max, threads);
			MultithreadedPrimeFinder.findPrimes(max, threads);
		}
	}
}
